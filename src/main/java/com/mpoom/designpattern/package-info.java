package com.mpoom.designpattern;
/**
 * @description 面向对象设计原则
 * 对于面向对象软件系统的设计而言，在支持可维护性的同时，提供系统的可用复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性
 * 是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护的复用时以设计原则为基础的。每个设计原则都蕴含了一些面相对象设计的思想，可以从
 * 不同的角度提升一个软件结构的设计水平。
 *
 * 面向对象设计原则为支持可维护复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。
 *
 * 常用的面向对象设计原则：
 * （1）单一职责原则： 一个类只负责一个功能领域中的相应职责
 * （2）开闭原则： 软件实体应该对扩展开放，而对修改关闭
 * （3）里氏代换原则： 所有引用基类对象的地方能够透明使用其子类对象
 * （4）依赖倒转原则： 抽象不应该依赖于细节，细节应该依赖于抽象
 * （5）接口隔离原则： 使用多个专门的接口，而不是使用单一的总接口
 * （6）合成复用原则： 尽量使用对象组合，而不是继承来达到复用的目的
 * （7）迪米特法则： 一个软件实体应当尽可能少地与其他实体发生相互作用
 *
 * @author: Yaoke.Hu
 * @date: 2020/10/18
 */