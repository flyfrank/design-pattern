package com.mpoom.designpattern.behavioral.templatemethod;
/**
 * @description: 模板方法模式
 * 模板方法模式定义如下：
 * 模板方法模式：定义一个操作中算法的框架，而将一些步骤延迟到子类中。
 * 模板方法模式使得子类可以不改变一个算法的结构即可重新定义该算法的某些提定步骤。
 *
 * 模板方法模式时基于继承的代码复用技术，它是一种类行为模式。
 *
 * 模式实现：
 * 在实现模板方法模式时，一般先设计出算法的轮廓和框架，再给出这个算法的各个逻辑步骤。实现这些具体逻辑步骤的方法即为基本方法，而将这些基本方法汇
 * 总起来的方法即为模板方法，模板方法模式的名字也因此而来。
 *
 * 模板方法：
 * 一个模板方法是定义在抽象类中的、把基本操作方法组合在一起形成一个总算法或一个总行为的方法。这个模板方法定义在抽象类中，并由子类不加以修饰地完
 * 全继承下来。模板方法是一个具体的方法，它给出一个顶层逻辑框架，而逻辑的组成步骤在抽象类中可以是具体方法，也可以是抽象方法。由于模板方法是具体
 * 方法，因此模板方法模式中的抽象层只能是抽象类，而不是接口。
 *
 * 基本方法：
 * 基本方式是实现算法各个步骤的具体方法，时模板方法的组成部分。基本方法又可以分为三中：抽象方法（Abstract Method)、具体方法（Concrete
 * Method）和钩子方法（Hook Method).
 * （1）抽象方法：一个抽象方法由抽象类生命、由其具体子类实现。
 * （2）具体方法：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。
 * （3）钩子方法：一个钩子方法有一个抽象类或具体类声明并实现，而其子类可能会加以扩展。通常在父类中给出的实现是一个空实现，并以该空实现作为方法
 *  的默认实现，当然钩子方法也可以提供一个非空的默认实现。
 *
 *  在模板方法模式中，钩子方法有两类：
 *  （1）第一类钩子方法可以与一些具体步骤“挂钩”，以实现在不同条件下执行模板方法钟的不同步骤，这类钩子方法的返回类型通常时boolean类型的，这类
 *  方法名一般为isXXX()，用于对某个条件进行判断，如果条件满足泽执行某一步骤，否则将不执行。
 *  （2）第二类钩子方法就是实现体为空的具体方法，子类可以根据需要覆盖或者继承这些钩子方法，与抽象方法相比，这类钩子方法的好处在于子类如果没有
 *  覆盖父类中定义的钩子方法，编译可以正常通过，但是如果没有覆盖父类中声明的抽象方法，编译将报错。
 *
 *  钩子方法的优点：
 *  自爱模板方法模式中，由于面向对象的多态性，子类对象在运行时将覆盖父类对象，子类的钩子方法也将覆盖父类的钩子方法，从而可以通过在子类中实现的
 *  钩子方法对父类方法的执行惊醒约束，实现子类对父类的反向控制。
 * @author: Yaoke.Hu
 * @date: 2020/10/11
 */

